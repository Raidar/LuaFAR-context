.Language=Russian,Russian (Русский)
.PluginContents=LuaFAR context
.Options TabSize=4
.Options CtrlColorChar=\
.Options CtrlStartPosChar=¦

@Contents
$ #Пакет LuaFAR context#
  LuaFAR context — пакет для определения типов файлов и работы
с файлами конфигураций параметров, связанных с типами файлов.

    ~Организация пакета~@LFc_Organize@
      ~Конфигурация параметров~@LFc_config@
      ~Использование конфигураций~@LFc_usecfg@
        1. ~Регистрация~@LFc_usecfg_register@
        2. ~Загрузка таблицы~@LFc_usecfg_load@
        3. ~Подключение скрипта~@LFc_usecfg_require@
      ~Конфигурация типов файлов~@LFc_types@
        ~Таблица абстрактных типов~@LFc_abstypes@
      ~Используемые таблицы~@LFc_tables@
      ~Определение типа файла~@LFc_detect@
      ~Механизм наследования~@LFc_inherit@

    ~Файлы пакета~@LFc_files@
      Скрипт ~initiate.lua~@LFc_initiate@
      Скрипт ~detectType.lua~@LFc_detectType@
      Скрипт ~handleType.lua~@LFc_handleType@
      Скрипт ~configData.lua~@LFc_configData@

  Ссылки:
    ~Авторы проекта~@Authors@
    Вопросы и ответы по Lua и LuaFAR: ~LuaFAR FAQ~@<..\faq\>Contents@

@Help
 ~LuaFAR context~@Contents@
 ~Авторы проекта / Благодарности~@Authors@

@Authors
$ #Авторы проекта#: LF context
  © 2008—2010, ~maxfl~@mailto:gmaxfl@@gmail.com@.
  © 2009+, ~Aidar~@mailto:raidar@@yandex.ru@.

  #Благодарности#
  — ¦Shmuel Zeigerman:
библиотека LuaFAR, плагины на основе LuaFAR, исходники к ним,
комментарии и пояснения аспектов (работы с Lua, библиотекой и плагином),
тестирование пакета Rh_Scripts, дополнительные библиотеки (console, …);

  Также спасибо ВСЕМ за обсуждение, предложения и выявление ошибок.

 ~Содержание~@Contents@

@LFc_Organize
$ #Организация пакета#: LF context
  Темы раздела:
      ~Конфигурация параметров~@LFc_config@
      ~Использование конфигураций~@LFc_usecfg@
        1. ~Регистрация~@LFc_usecfg_register@
        2. ~Загрузка таблицы~@LFc_usecfg_load@
        3. ~Подключение скрипта~@LFc_usecfg_require@
      ~Конфигурация типов файлов~@LFc_types@
        ~Таблица абстрактных типов~@LFc_abstypes@
      ~Используемые таблицы~@LFc_tables@
      ~Определение типа файла~@LFc_detect@
      ~Механизм наследования~@LFc_inherit@

 ~Содержание~@Contents@

@LFc_config
$ #Конфигурация параметров#: LF context
  Конфигурация параметров указывается в #файле конфигурации параметров#.
 Файлы конфигураций параметров располагаются в следующих каталогах:
    \37cfg\-    — ¦для основных файлов пакета.
    \37usrcfg\- — ¦для пользовательских файлов.
  Файл конфигурации параметров представляет собой скрипт Lua,
который возвращает соответствующую таблицу конфигурации параметров.
Эта таблица неявно использует таблицу ~конфигурации типов файлов~@LFc_types@.

  Параметры таблицы задаются в поле-таблице \37_meta_\-,
а параметры отдельных подтаблиц — в аналогичном поле \37_meta_\- этих подтаблиц.
  Например, в \37_meta_\- таблицы хранятся ~параметры слияния~@LFc_config_merge@
основной таблицы конфигурации с пользовательской таблицей
при ~чтении этой конфигурации~@LFc_config_read@.
 \33TODO: Сделать спец. тему по используемым параметрам в _meta_.\-

  #Таблица конфигурации параметров# содержит поля, имеющие вид:
    \37<тип файла> = <параметр конфигурации для этого типа>,\-
 или
    \37<тип файла> = \3F{\37 <параметры конфигурации для этого типа> \3F},\-

  Примечание:
 Такой вид обязателен только для конфигураций, ~регистрация~@LFc_config_register@
которых выполняется с использованием параметра \37inherit == true\-.
Другие конфигурации могут иметь любой вид, определяемый пользователем.

    \1FПример поля\- из \37cfg\\descs_config.lua\-:
  \37sql  = 'Structured Query Language'\3F,\-

    \1FПример поля\- из \37usrcfg\\inh_config.lua\-:
  \37lua_inh = \3F{ \3Aother\37 = 'from lua'\3F, \3Ainherit\37 = 'source' \3F},\-

  Для работы со сложными конфигурациями можно задать в качестве метаиндекса
общую конфигурацию с абстрактными типами — #абстрактную конфигурацию#, при этом
поле \37_meta_.abstract\- такой таблицы должно быть установлено в \37true\-.
Примером таблицы абстрактной конфигурации является
~таблица абстрактных типов~@LFc_abstypes@ для конфигурации типов файлов.

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_usecfg
$ #Использование конфигураций#: LF context
  ~Конфигурация параметров~@LFc_config@ формируется на языке Lua как таблица:
имя поля соответствует имени типа, значение поля задаёт значение параметра
или набора параметров конфигурации для этого типа.
  Полученную конфигурацию можно использовать тремя способами:
  1) ¦~зарегистрировать~@LFc_usecfg_register@ её в реестре конфигураций;
  2) ¦~загрузить таблицу~@LFc_usecfg_load@ с поддержкой механизма наследования.
  3) ¦~подключить скрипт~@LFc_usecfg_require@ и реализовать работу с таблицей вручную.

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_usecfg_register
$ #Использование конфигураций: Регистрация#: LF context
  Регистрация конфигурации означает использование #реестра конфигураций# —
специальной таблицы, которая содержит основные сведения о конфигурации.

  #Порядок работы#:
  1. ¦Зарегистрировать конфигурацию
с помощью \37context.config.\-~register~@LFc_config_register@.
  2. ¦При первом обращении к конфигурации через \37ctxdata.config.<имя>\-
конфигурация подключится автоматически и будет храниться в памяти.
  3. ¦Если в конфигурации нет нужного типа, можно использовать встроенный
~механизм наследования~@LFc_inherit@ типов для поиска подходящего типа, имеющегося
в этой конфигурации.

    \1FПример\-:
    1. Таблица из \37usrcfg\\inh_config.lua\-:
  \3Flocal\37 data = \3F{\-
    \37lua     = \3F{ \3Aother\37 = 'from lua' \3F},\-
    \37lua_inh = \3F{ \3Aother\37 = 'from lua'\3F,\-
\3Ainherit\37 = 'source' \3F},\-
  \3F}\37 --\-
  \3Freturn\37 data, 'user'\-
    2. Код из \37test\\inherit.lua\-:
  \37context.config.register\3F{\-
    \3Akey\37 = 'paraminherit'\3F,\-
\3Aname\37 = 'inh'\3F, \3Ainherit\37 = true\3F}\37 --\- Регистрация
  \3Flocal\37 cfgdata = ctxdata.config.paraminherit --\- Доступ к конфигурации
  \3Flocal\37 param = cfgdata.lua.param --\- Получение параметра для \37lua\-

 ~Использование конфигураций~@LFc_usecfg@

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_usecfg_load
$ #Использование конфигураций: Загрузка таблицы#: LF context
  Загрузка таблицы означает использование конфигурации без реестра,
но с сохранением ~механизма наследования~@LFc_inherit@. Для этого
используются две ~специальные функции~@LFc_configData@ из \37context.config\-.

  #Порядок работы#:
  1. ¦Подготовить информацию для загрузки с помощью \37context.config.fillRegData\-.
  2. ¦Загрузить таблицу конфигурации с помощью \37context.config.load\-.

    \1FПример\- для таблицы из \37usrcfg\\inh_config.lua\-:
  \3Flocal\37 regdata = \37context.config.fillRegData\3F{\-
    \3Akey\37 = 'paraminherit'\3F,\-
\3Aname\37 = 'inh'\3F, \3Ainherit\37 = true\3F}\37 --\- Подготовка
  \3Flocal\37 cfgdata = context.config.load\3F(\37regdata\3F)\37 --\- Загрузка
  \3Flocal\37 param = cfgdata.lua.param --\- Получение параметра для \37lua\-

 ~Использование конфигураций~@LFc_usecfg@

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_usecfg_require
$ #Использование конфигураций: Подключение скрипта#: LF context
  Подключение скрипта позволяет работать с конфигурациями без регистрации
конфигурации и ~механизма наследования~@LFc_inherit@.

  #Порядок работы#:
  1. ¦Подключить файл-скрипт конфигурации, например, с помощью \37require\-.
  2. ¦Если в конфигурации нет нужного типа, то поиск подходящего типа,
имеющегося в этой конфигурации, можно выполнить с помощью ~функций~@LFc_detect_use@
\37configType\- и \37configNextType\- из \37context.detect.use\-.

    \1FПример\-:
    1. Таблица из \37cfg\\descs_config.lua\-:
  \3Flocal\37 descs = \3F{\-
    \37far  = 'FAR: File and ARchive Manager'\3F,\-
    \37lua  = 'Lua script'\3F,\-
  \3F}\37 --\-
    2. Код из \37test\\typedesc.lua\-:
  \3Flocal\37 descs = \3Frequire\37 "context.cfg.descs_config" --\- Подключение
  \3Flocal function\37 typeDesc (ctype)\-
    \3Freturn\37 descs[ctype] \3For\37 "" --\- Получение описания для ctype
  \3Fend --\-

 ~Использование конфигураций~@LFc_usecfg@

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_types
$ #Конфигурация типов файлов#: LF context
  Таблица конфигурации типов файлов задаётся в файле конфигурации
и используется неявно остальными таблицами ~конфигураций параметров~@LFc_config@.
Файл конфигурации типов файлов — скрипт \37types_config.lua\-,
который возвращает таблицу конфигурации типов файлов.

  #Таблица конфигурации типов файлов# содержит поля, имеющие вид:
    \37<тип файла> = \3F{\37 <параметры определения и конфигурации типа> \3F},\-

    \1FПримеры полей\-:
  \37codscript = \3F{ \3Ainherit\37 = 'main'\3F,\-
\3Adesc\37 = 'Script code'\3F, \3Agroup\37 = 'script' \3F},\-
  \37lua     = \3F{ \3Ainherit\37 = 'codscript'\3F, \3Adesc\37 = 'Lua'\3F,\-
              \3Amasks\37 = \3F{\37'%.lua$'\3F,\37'%.wlua$'\3F}\37,\-
              \3Afirstline\37 = \3F{\37'^%s*%-%-'\3F,\37'^##!%s-%S*lua'\3F}\37 \3F},\-
  \37lua_dat = \3F{ \3Ainherit\37 = 'lua'\3F,\-
\3Adesc\37 = 'Lua data'\3F, \3Agroup\37 = 'config'\3F,\-
              \3Amasks\37 = \3F{\37'%.cfg$'\3F,\37'History%.data$'\3F},\-
\3Afirstline\37 = \3F{\37'^do local'\3F} },\-

  #Описание параметров# типа:
    \37inherit\-   (string) — ¦тип-родитель данного типа
(используется в ~механизме наследования~@LFc_inherit@).
    \37desc\-      (string) — ¦краткое описание типа.
    \37group\-     (string) — ¦тип, в качестве которого используется этот тип
(например, конфигурация может быть скриптом).
    \37masks\-      (table) — ¦маски имени файла для типа файла.
    \37firstline\-  (table) — ¦обычные шаблоны первой строки файла для типа.
    \37strongline\- (table) — ¦строгие шаблоны первой строки файла для типа.
    \37weight\-    (number) — ¦вес типа файла (по умолчанию равен \371\-;
используется для типов с неопределённой структурой имени и первой строки файла).

  Примечания:
 1. Параметр \37strongline\- в отличие от \37firstline\- используется
также при определении типа в случае отсутствия подходящего типа по маске.
Кроме этого, для типа, подошедшего по маске, сначала проверяются строки
из \37strongline\-, а затем (при отсутствии совпадения) — строки из \37firstline\-.
 2. Параметр \37group\- используется как дополнение к \37inherit\-.
Если \37inherit\- определяет наследование типов (по семантике и часто области
использования), то \37group\- характеризует близость типа по другим отношениям
(по синтаксису, частоте использования, происхождению и т.п.).

  Таблица конфигурации типов файлов доступна через \37ctxdata.config.types\-.
Она использует специальную ~таблицу абстрактных типов~@LFc_abstypes@.

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_abstypes
$ #Таблица абстрактных типов#: LF context
  #Таблица абстрактных типов# — специальная таблица предопределённых типов,
используемых для организации типов файлов в виде некоторой иерархии,
связанной с похожестью содержимого файлов.
    \1FПримеры\-:
  \37text   = \3F{ \3Ainherit\37 = 'default'\3F, \3Adesc\37 = 'Text type'\3F },\-
    \37plain  = \3F{ \3Ainherit\37 = 'text'\3F, \3Adesc\37 = 'Plain text'\3F },\-
    \37rich   = \3F{ \3Ainherit\37 = 'text'\3F, \3Adesc\37 = 'Rich text'\3F },\-
      \37config = \3F{ \3Ainherit\37 = 'rich'\3F, \3Adesc\37 = 'Config text'\3F },\-

  Таблица абстрактных типов также имеет специальный тип \37ignore\-,
в параметре \37skiplines\- которого указываются пропускаемые строки файла
при ~получении первой строки файла~@LFc_detect_reads@.
    \1FТип\- \37ignore\- из \37cfg\\types_config.lua\-:
  \37ignore  = \3F{ \3Ainherit\37 = 'default'\3F, \3Adesc\37 = 'Ignore data'\3F,\-
              \3Askiplines\37 = \3F{\37 ['^%s-$'] = false, ['^<%?xml'] = 'xml'\3F, },\-
            \3F},\37 --\- empty, xml, etc

  Таблица абстрактных типов доступна через \37ctxdata.abstypes\-.
Она используется ~таблицей конфигурации типов файлов~@LFc_types@.

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_tables
$ #Используемые таблицы#: LF context
  Функции пакета доступны через глобальную переменную \37context\- или её таблицы.

  Таблицы функций:
    Функции ~configData.lua~@LFc_configData@ доступны через \37context.config\-.
    Функции ~detectType.lua~@LFc_detectType@ доступны через \37context.detect\-.
    Функции ~handleType.lua~@LFc_handleType@ доступны через \37context.handle\-.

  Пакет хранит данные и настройки в глобальной переменной \37ctxdata\- или её таблицах.

  — Таблицы данных:
    \37config\-     — ¦доступ к ~зарегистрированным конфигурациям~@LFc_usecfg_register@.
    \37editors\-    — ¦доступ к конфигурациям файлов, открытых в редакторе \1F*\-.
    \37viewers\-    — ¦доступ к конфигурациям файлов, открытых для просмотра \1F*\-.

  — Таблицы настроек:
    \37reg\-        — ¦общий ~реестр конфигураций~@LFc_config_register@.
    \37abstypes\-   — ¦~таблица абстрактных типов~@LFc_types@.
    \37isResident\- — ¦признак использования ~resident.lua~@LFc_samples@.
    \37checked\-    — ¦таблица конфигураций, проверенных на наследование типов.

  \1F*\- — ¦таблицы доступны только при использовании скрипта handleType.lua,
в которой реализована необходимая ~функциональность~@LFc_process_auto@.

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_detect
$ #Определение типа файла#: LF context
  #Алгоритм# определения типа файла:
 1. ¦Если задано только имя файла,
тип определяется только по маскам имени файла.
 2. ¦Если задана также первая строка файла, то:
   1. ¦Если есть типы, подходящие по маскам, то среди них
выбирается тип, подходящий и по всем шаблонам первой строки.
      \3A1\-. ¦Если такой тип один, то выбирается этот тип.
      \3A2\-. ¦Если таких типов нет, то выбирается первый из типов,
подошедших по маскам и не имеющих шаблонов первой строки.
      3. ¦Если таких типов не найдено, то выбирается
первый попавшийся из типов, подошедших по маскам.
   2. ¦Если типов, подходящих по маскам, нет, выбирается
первый попавшийся тип, подходящий по строгим шаблонам первой строки.
 3. ¦Если подходящего типа нет, то
   1. ¦если нет первой строки, возвращается '\37none\-'.
   2. ¦если есть первая строка, тип выбирается в соответствии
с п.2.1.\3A1\- и п.2.1.\3A2\-, но без учёта наличия масок.

  #Особенности# алгоритма:
 1. ¦Поиск среди типов выполняется с учётом веса (по умолчанию равен 1):
если подходят несколько типов, возвращается тип с бо´льшим весом.
 2. ¦Поиск по маскам и шаблонам выполняется с учётом длины совпадения:
Если подходят несколько типов с одинаковым весом,
то возвращается тот тип, у которого длина совпадения больше.

  Алгоритм реализован в виде функции ~FileType~@LFc_detect_main@
таблицы \37context.detect\- (скрипт ~detectType.lua~@LFc_detectType@).

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_inherit
$ #Механизм наследования#: LF context
  Механизм наследования типов для конфигураций позволяет
обращаться к полю конфигурации (или отдельным параметрам поля),
которого нет в таблице, при этом получается вместо них другое поле
(или его параметр), которое рассматривается как родитель исходного поля.

  Наследование типов подразумевает следующее:
  1. ¦Если поле для типа не найдено в таблице конфигурации,
то возвращается поле для типа, от которого этот тип наследует.
(Поиск продолжается, пока не будет найдено поле,
имеющееся в таблице, иначе будет возвращено \37nil\-.)
  2. ¦Если поле найдено и является таблицей,
то оно наследует также все не заданные явно параметры.
  3. ¦Информация о наследовании для поля берется из таблицы типов
(параметр \37inherit\-), а для параметров поля —
сначала из самой таблицы конфигурации (также \37inherit\-).
  4. ¦При загрузке типов проверяется наследование: если тип наследует
от неизвестного типа либо от себя (напрямую или косвенно),
появится сообщение об ошибке и наследование будет удалено.
В случае возникновения такой ошибки исправьте назначение
в параметре \37inherit\- типа-родителя.

  Схема механизма наследования:
  1. ¦Для каждого типа в таблице ~конфигурации типов файлов~@LFc_types@
необходимо задание параметра \37inherit\- со значением типа-родителя.
  2. ¦~Регистрация конфигурации~@LFc_config_register@ должна быть выполнена
с обязательным использованием параметра \37inherit == true\-.
  3. ¦Для полей конфигураций возможно указание параметра \37inherit\-
с другим, определяемым пользователем, значением типа-родителя.
  4. ¦Для таблицы \37ctxdata.config\- скрипт ~configData.lua~@LFc_configData@
задаёт метатаблицу с методом \37__index\-.
  5. ¦Этот метаметод при первом ~обращении к конфигурации~@LFc_usecfg_register@
позволяет ~загрузить таблицу~@LFc_config_load@ и установить для неё
(а также её полей-таблиц) необходимые метаметоды-функции.
  6. ¦Эти функции реализуют указаный механизм с помощью анализа
параметров \37inherit\- и вызова функций \37context.detect\-.
При этом учитывается использование метаметода \37__cfgMeta\-
в конфигурации, например, при слиянии таблиц конфигурации.

 ~Содержание~@Contents@     ~Организация пакета~@LFc_Organize@

@LFc_files
$ #Файлы пакета#: LF context
  Основные каталоги и файлы пакета:
    \37initiate.lua\-       — ¦~скрипт запуска~@LFc_initiate@ пакета.
      \37resident.lua\-     — ¦~резидентный скрипт~@LFc_resident@.
    \37cfg\\\-      — ¦каталог с основными файлами ~конфигураций параметров~@LFc_config@:
      \37types_config.lua\- — ¦~типы файлов~@LFc_types@.
      \37descs_config.lua\- — ¦описания типов файлов.
    \37samples\\\-  — ¦каталог ~скриптов-примеров~@LFc_samples@ подключения пакета.
    \37test\\\-     — ¦каталог скриптов для простой проверки работы пакета.
    \37usrcfg\\\-   — ¦каталог с пользовательскими файлами конфигураций параметров.
    \37scripts\\\-  — ¦каталог скриптов для работы c конфигурациями параметров:
      \37detectType.lua\-   — ¦~определение типа файла~@LFc_detectType@.
      \37handleType.lua\-   — ¦~управление типом файла~@LFc_handleType@.
      \37configData.lua\-   — ¦~работа с конфигурациями~@LFc_configData@ параметров.
    \37utils\\\-    — ¦каталог утилит — скриптов служебного назначения:
      \37useColors.lua\-    — ¦работа c цветами.
      \37useDatas.lua\-     — ¦работа с таблицами данных.
      \37useTables.lua\-    — ¦работа c таблицами.
      \37useLocale.lua\-    — ¦работа с локализацией.
      \37useNumbers.lua\-   — ¦работа c числами.
      \37useUtils.lua\-     — ¦общие подпрограммы.

 ~Содержание~@Contents@

@LFc_initiate
$ Скрипт #initiate.lua#: LF context
  Скрипт предназначен для запуска (предварительной настройки)
пакета #LuaFAR context# перед его непосредственным использованием.

  #Порядок инициирования#:
  1. ¦Объявление глобальной переменной \37context\-.
  2. ¦Подключение скрипта ~configData.lua~@LFc_configData@
для задания таблицы функций \37context.config\-.
  3. ¦Регистрация ~конфигурации типов файлов~@LFc_types@ \37types\-.
  4. ¦Подключение скрипта ~detectType.lua~@LFc_detectType@
для задания таблицы функций \37ctxdata.detect\-.
  5. ¦Подключение остальных скриптов пакета.

 ~Содержание~@Contents@     ~Файлы пакета~@LFc_files@

@LFc_resident
$ Скрипт #resident.lua#: LF context
  Скрипт используется в функции \37MakeResident\-
плагина для автоопределения типов файлов в скриптах плагина.
    Установка:
  1. ¦В диалоге настройки плагина \1Fотключить\- опцию
"Всегда перезагружать скрипт по умолчанию" (Always reload default script).
Иначе не будет работать автоопределение типа!
  2. Включить следующие строки в самое начало файла \37_usermenu.lua\-:
 \3Frequire\37 \37"context.initiate"               --\- Запуск пакета.
 \37MakeResident(\3Frequire\37 "context.resident") --\- Запуск "резидента".

 ~Содержание~@Contents@     ~Файлы пакета~@LFc_files@

@LFc_samples
$ Каталог #samples\\#: LF context
  Каталог содержит примеры скриптов подключения пакета:
    \37lf4ed\\\-  — ¦для плагина "LuaFAR для редактора" (#LuaFAR for Editor#).
    \37plugin\\\- — ¦для произвольных плагинов на основе библиотеки #LuaFAR#.

  Скрипт \37plugin\\lf_plugin.lua\- представляет собой каркас (заготовку)
LuaFAR‑плагина с использованием автоопределения типов файлов.
  Файл \37plugin\\Makefile\- является заготовкой файла сборки плагина.
  См. также пример "Hello, World!" в исходных текстах библиотеки LuaFAR
и исходные тексты других плагинов: LuaFAR for Editor и т.д.

 ~Содержание~@Contents@     ~Файлы пакета~@LFc_files@

@LFc_colors
$ Цвета в #useColors.lua#: LF context
  Цвет можно задать стандартным для FAR'а образом — числом от 0 до 255 (0x00 — 0xFF) —
или строкой вида 'white on blue', где первый цвет — цвет текста, второй — цвет фона.

  Доступны следующие цвета:
 ┌\30──────────────────\-┬\30──────────────────\-┐
 │\08 0     black      \-│\80 8  gray/darkgray \-│
 ├\30──────────────────\-┼\30──────────────────\-┤
 │\18 1     navy       \-│\98 9     blue       \-│
 ├\30──────────────────\-┼\30──────────────────\-┤
 │\20 2   green/land   \-│\A0 A     lime       \-│
 ├\30──────────────────\-┼\30──────────────────\-┤
 │\30 3    cyan/teal   \-│\B0 B     aqua       \-│
 ├\30──────────────────\-┼\30──────────────────\-┤
 │\40 4    maroon      \-│\C0 C     red        \-│
 ├\30──────────────────\-┼\30──────────────────\-┤
 │\50 5 purple/magenta \-│\D0 D  pink/fuchsia  \-│
 ├\30──────────────────\-┼\30──────────────────\-┤
 │\60 6  brown/olive   \-│\E0 E    yellow      \-│
 ├\30──────────────────\-┼\30──────────────────\-┤
 │\70 7    silver      \-│\F0 F    white       \-│
 └\30──────────────────\-┴\30──────────────────\-┘

  Примечания:
 1. ¦Через наклонную черту "/" приведены альтернативные названия цветов.
 2. ¦Синонимы названий цветов 7—F = \37light\- + названия цветов 1—7.
 3. ¦Синонимы названий цветов 1—6 = \37dark\-  + названия цветов 7—E.
  Примеры:
 lightgreen, lightcyan, lightbrown,
 darkblue, darkpink, darkyellow.

 ~Содержание~@Contents@     ~Файлы пакета~@LFc_files@

@LFc_detectType
$ Скрипт #detectType.lua#: LF context
  Скрипт предназначен для определения типа файла.
 Он содержит следующие функции, доступные через \37context.detect\-:

  1. ¦Основная ~функция определения типа~@LFc_detect_main@.
  2. ¦~Функции получения первой строки~@LFc_detect_reads@ файла.
  3. ¦~Функции определения типа~@LFc_detect_area@: объявлены в таблице \37area\-.
  4. ¦~Функции использования типов~@LFc_detect_use@: объявлены в таблице \37use\-.
  5. ¦~Функции проверки конфигурации~@LFc_detect_check@: объявлены в таблице \37check\-.

  Функции используют таблицу ~конфигурации типов файлов~@LFc_types@.

 ~Содержание~@Contents@     ~Файлы пакета~@LFc_files@

@LFc_detect_main
$ Функция \37context.detect.\-#FileType#: LF context
  Функция определяет тип файла по имени и первой строке в соответствии
с ~алгоритмом~@LFc_detect@.
    \37local ctype = context.detect.FileType(t)\-

  Параметры:
    \37t\- (table)  — параметры определения типа. Поля:
      \37filename\-  (string) — ¦имя файла.
      \37path\-      (string) — ¦путь к файлу (без имени).
      \37firstline\- (string) — ¦первая строка файла.
      \37forceline\-   (bool) — ¦приоритетность первой строки.
      \37matchcase\-   (bool) — ¦учёт регистра для имени файла.

  Результат:
    \37typename\-    (string) — ¦Строка с именем типа или '\37none\-'.

  Примечание:
 Если \37forceline == true\- и нет типов, подошедших по маске и первой
строке, будет выбран первый из типов, подходящих по первой строке.
В противном случае считается, что подходящего типа нет ('\37none\-').

 ~Содержание~@Contents@     Скрипт ~detectType.lua~@LFc_detectType@

@LFc_detect_reads
$ #Функции получения первой строки#: LF context
  Функции предназначены для получения первой информативной строки файла
с целью определения типа этого файла. К ним относятся следующие функции:
    \37readFileFirstLine\-   — ¦для произвольного файла.
    \37readEditorFirstLine\- — ¦для файла, открытого в редакторе.
    Обе функции используют функцию пропуска строк:
    \37checkSkipLines\-      — ¦проверка строки на "игнорируемость".

  Функция \37readFileFirstLine\- получения первой строки некоторого файла
открывает этот файл на чтение и с помощью \37checkSkipLines\- получает
необходимую первую строку файла.
  Функция \37readEditorFirstLine\- получения первой строки файла, открытого
в редакторе, использует функции FAR API и также с помощью \37checkSkipLines\-
получает первую строку файла.

  Функция пропуска строк \37checkSkipLines\- позволяет при чтении из файла
пропустить строки, которые не содержат всей информации для правильного
определения типа файла. Эти строки задаются в параметре \37skiplines\-
специального типа \37ignore\- из таблицы ~конфигурации типов файлов~@LFc_types@.
Кроме того, функция позволяет получить предварительный тип файла,
который используется вместо '\37none\-', если нет подходящего типа для файла.
Для этого используются ключи вида \37<шаблон строки> = <предварительный тип файла>\-.

 ~Содержание~@Contents@     Скрипт ~detectType.lua~@LFc_detectType@

@LFc_detect_area
$ Функции таблицы \37context.detect.\-#area#: LF context
  Функции предназначены для определения типа файла в областях FAR.
Таблица \37context.detect.area\- содержит следующие функции:
    \37editor\-  — ¦для файла, открытого в редакторе.
    \37viewer\-  — ¦для файла, открытого для просмотра.
    \37panels\-  — ¦для текущего файла на активной панели.
    \37current\- — ¦для текущего файла в активной области FAR.

   Все перечисленные функции используют функцию ~FileType~@LFc_detect_main@.
Параметр и результат перечисленных функций такой же, как у этой функции.

   Таблица \37area\- содержит также эти же функции с именами — значениями флагов областей:
\37F.WTYPE_EDITOR\-, \37F.WTYPE_VIEWER\-, \37F.WTYPE_PANELS\-
(здесь \37_F = far.Flags\- — таблица флагов).

  Примечания:
 1. ¦Функции заполняют только отсутствующие поля параметра \37t\-.
 2. ¦Исключение — значение поля \37firstline\- параметра \37t\-
для функций \37viewerFileType\- и \37panelsFileType\-:
Если \37firstline == true\-, то значение поля \37firstline\-
получается чтением первых строк из файла (\37readFileFirstLine\-), иначе — не меняется.
 3. ¦Для функции \37editorFileType\- значение \37firstline\- всегда
получается чтением первых строк файла (\37readEditorFirstLine\-), открытого в редакторе.
 4. ¦Функция \37currentFileType\- только определяет текущую область
и в соответствии с этим вызывает одну из первых трёх функций.
 5. ¦Функция \37panelsFileType\- может также вернуть следующие значения:
    \37emptypanel\- — ¦если панель пуста (нет ни одного элемента).
    \37back\-       — ¦если на панели текущим элементом является '\37..\-'.
    \37dir\-        — ¦если на панели текущим элементом является каталог.
 6. Для функции \37panelsFileType\- первая строка определяется
    только для элементов файловой панели (при \37firstline == true\-).

 ~Содержание~@Contents@     Скрипт ~detectType.lua~@LFc_detectType@

@LFc_detect_use
$ Функции таблицы \37context.detect.\-#use#: LF context
  Функции предназначены для облегчения использования типов в конфигурациях.
Таблица \37context.detect.use\- содержит следующие функции:

  1. ¦Функции работы с типами:
    \37nextType\-        — ¦получение следующего типа по указанному полю.
    \37parentType\-      — ¦получение типа-родителя (по полю \37inherit\-).
    \37groupType\-       — ¦получение типа-группы (по полю \37group\-).
    \37isType\-          — ¦проверка типа на соответствие
или наследуемость от другого типа (по \37inherit\-).
    \37abstractConfig\-  — ¦получение ~абстрактной конфигурации~@LFc_config@.
    \37nomaskType\-      — ¦получение типа-родителя, не имеющего масок файлов.
    \37abstractType\-    — ¦получение ~абстрактного типа~@LFc_abstypes@-родителя.

  2. ¦Функции для незарегистрированной таблицы конфигурации:
    \37nextConfigType\-  — ¦получение следующего типа
с учётом наследования и эквивалентности типов файлов.
    \37configType\-      — ¦получение первого подходящего типа.
    \37configNextType\-  — ¦получение следующего подходящего типа.

 ~Содержание~@Contents@     Скрипт ~detectType.lua~@LFc_detectType@

@LFc_detect_check
$ Функции таблицы \37context.detect.\-#check#: LF context
  Функции предназначены для проверки конфигураций.
 Таблица \37context.detect.check\- содержит следующие функции:

    \37itself\-     — ¦проверка типа на прямое наследование от себя.
    \37superType\-  — ¦проверка типа на наследование от неизвестного типа.
    \37type\-       — ¦проверка типа конфигурации на правильность:
отсутствие наследования от неизвестного типа
и отсутствие прямого и косвенного наследования от самого себя.
    \37types\-      — ¦проверка всех типов конфигурации на правильность.
    \37reset\-      — ¦сброс проверки типов конфигурации на правильность.

 ~Содержание~@Contents@     Скрипт ~detectType.lua~@LFc_detectType@

@LFc_handleType
$ Скрипт #handleType.lua#: LF context
  Скрипт предназначен для управления типом открытого файла.
Он содержит следующие функции, доступные через \37context.handle\-:
    \37editorEvent\-  — ¦~автоопределение типа файла~@LFc_handleType_auto@,
открываемого в редакторе.
    \37viewerEvent\-  — ¦~автоопределение типа файла~@LFc_handleType_auto@,
открываемого для просмотра.

 \1F*\- Открытый файл — файл, открытый в FAR для редактирования или просмотра.

 ~Содержание~@Contents@     ~Файлы пакета~@LFc_files@

@LFc_handleType_auto
$ #Функции автоопределения типа файла#: LF context
  Функции \37editorEvent\- и \37viewerEvent\- предназначены для вызова
в обработчиках событий редактора и просмотра соответственно.
  Вызов этих функций позволяет:
 — ¦заранее определить тип открытого файла.
 — ¦использовать ~конфигурацию параметров~@LFc_config@ этого файла.
 — ¦реализовать доступ к конфигурациям открытых файлов с помощью таблиц
\37ctxdata.editors\- и \37ctxdata.viewers\- напрямую, без анализа типа файлов.
При этом требуемая конфигурация \37cfg\- будет получена
через \37ctxdata.config.cfg\- для типа выбранного открытого файла.

    \1FФормат доступа\-:
  \37ctxdata.editors[k]      --\- Конфигурации для \37k\-‑го редактора.
  \37ctxdata.editors.current --\- Конфигурации для текущего редактора.
  \37ctxdata.viewers[k]      --\- Конфигурации для \37k\-‑го просмотра.
  \37ctxdata.viewers.current --\- Конфигурации для текущего просмотра.

 ~Содержание~@Contents@     Скрипт ~handleType.lua~@LFc_handleType@

@LFc_configData
$ Скрипт #configData.lua#: LF context
  Скрипт предназначен для работы с ~конфигурациями параметров~@LFc_config@
совместно с таблицей ~конфигурации типов файлов~@LFc_types@.
Он содержит следующие функции, доступные через \37context.config\-:
    \37merge\-       — ¦~слияние таблиц конфигураций~@LFc_config_merge@ параметров.
    \37read\-        — ¦~чтение конфигурации~@LFc_config_read@ параметров из файла.
    \37reset\-       — ¦~сброс конфигурации~@LFc_config_reset@ параметров.
    \37load\-        — ¦~загрузка конфигурации~@LFc_config_load@ параметров из файла.
    \37fillRegData\- — ¦~подготовка информации~@LFc_config_fillRegData@ о конфигурации.
    \37register\-    — ¦~регистрация конфигурации~@LFc_config_register@ параметров.
    \37unregister\-  — ¦~снятие с регистрации~@LFc_config_unregister@ конфигурации параметров.

  Кроме того, скрипт реализует ~механизм наследования~@LFc_inherit@ типов
для зарегистрированных конфигураций с помощью использования параметра \37inherit\-
и задания метаметода \37__index\- для этих конфигураций и их полей-таблиц.

 ~Содержание~@Contents@     ~Файлы пакета~@LFc_files@

@LFc_config_merge
$ Функция \37context.config.\-#merge#: LF context
  Функция осуществляет слияние двух таблиц конфигураций.
Используется в функции ~readConfig~@LFc_config_read@.
    \37local cfg = context.config.merge(base, user, mode)\-

  Параметры:
    \37base\- (table) — ¦основная ~таблица конфигурации~@LFc_config@.
    \37user\- (table) — ¦пользовательская таблица конфигурации.
    \37mode\- (table) — ¦параметры слияния таблиц конфигураций.

  Результат:
    \37cfg\-  (table) — сформированная таблица конфигурации или \37nil\-.

  Параметры слияния определяют принцип объединения данных из таблиц конфигураций.

  #Выбор основной таблицы# задаётся полем \37mode.basis\-:
    \37nil\-         — ¦по умолчанию — аналогично "base".
    "base"      — ¦таблица из основного файла конфигурации.
    "user"      — ¦таблица из пользовательского файла конфигурации.
  Функция возвращает выбранную основную таблицу, которая предварительно изменяется
(с учётом #вспомогательной таблицы#) в соответствии с выбранным режимом слияния.

  #Режим слияния таблиц# указывается в поле \37mode.merge\-:
    \37nil\-         — ¦по умолчанию — аналогично "update".
    "none"      — ¦использование только основной таблицы.
    "update"    — ¦обновление — замена полей основной таблицы:
из вспомогательной добавляет все имеющиеся в ней поля.
    "extend"    — ¦расширение — дополнение полей основной таблицы:
из вспомогательной добавляет поля, которых нет в основной.
    "asmeta"    — ¦слияние с помощью метатаблицы — аналогично "none",
но вспомогательная таблица задаётся как метаметод \37__cfgMeta\-
в метатаблице основной таблицы (если её нет, создаётся пустая).
    другой      — ¦неверный режим: выводится сообщение об ошибке
и возвращается \37base\- или \37user\-.

  Примечания:
 1. Параметры \37base\- и \37user\- обязательно должны быть таблицами.
 2. В этой версии используется упрощённое обновление и расширение таблиц.

 ~Содержание~@Contents@     Скрипт ~configData.lua~@LFc_configData@

@LFc_config_read
$ Функция \37context.config.\-#read#: LF context
  Функция осуществляет чтение конфигурации.
  Таблицы конфигурации считываются из двух папок: \37cfg\\\- и \37usrcfg\\\-,
а затем вызывается функция ~merge~@LFc_config_merge@ для их слияния.
    \37local cfg = context.config.read(regdata)\-

  Параметры:
    \37regdata\- (table) — ¦~информация о конфигурации~@LFc_config_regdata@.

  Результат:
    \37cfg\-     (table) — ¦таблица конфигурации или \37nil\-.

  Примечания:
 1. ¦Полное имя файла получается добавлением к \37name\- строки '\37_config\-'.
 2. ¦При \37inherit == true\- ~таблица конфигурации~@LFc_config@
должна иметь вид, аналогичный ~таблице типов файлов~@LFc_types@.
 3. ¦Параметры слияния таблиц задаются
(по приоритету использования в функции #read#):
   а) ¦в параметре ~функции регистрации конфигурации~@LFc_config_register@.
   б) ¦в поле \37_meta_\- таблицы пользовательского файла конфигурации.
   в) ¦в поле \37_meta_\- таблицы основного файла конфигурации.

 ~Содержание~@Contents@     Скрипт ~configData.lua~@LFc_configData@

@LFc_config_reset
$ Функция \37context.config.\-#reset#: LF context
  Функция осуществляет сброс конфигурации, если она была загружена.
    \37context.config.reset(key)\-

  Параметры:
    \37key\- (table) — ¦~имя конфигурации~@LFc_config_regdata@ в реестре конфигураций.

  Функция используется при #перерегистрации# существующей конфигурации
и при ~снятии с регистрации~@LFc_config_unregister@ зарегистрированной конфигурации.

 ~Содержание~@Contents@     Скрипт ~configData.lua~@LFc_configData@

@LFc_config_load
$ Функция \37context.config.\-#load#: LF context
  Функция загружает конфигурацию из файла.
    \37local cfg = context.config.load(regdata)\-

  Параметры:
    \37regdata\- (table) — ¦~информация о конфигурации~@LFc_config_regdata@.

  Результат:
    \37cfg\-     (table) — ¦таблица конфигурации или \37nil\-.

  Функция ~считывает конфигурацию~@LFc_config_read@ из файла
и устанавливает необходимые метаметоды для правильной работы с ней.

 ~Содержание~@Contents@     Скрипт ~configData.lua~@LFc_configData@

@LFc_config_fillRegData
$ Функция \37context.config.\-#fillRegData#: LF context
  Функция подготавливает информацию о конфигурации для дальнейшего использования.
    \37local regdata = context.config.fillRegData(regdata)\-

  Параметры:
    \37regdata\- (table) — ¦~информация о конфигурации~@LFc_config_regdata@.

  Результат:
    \37regdata\- (table) — ¦подготовленная информация о конфигурации или \37nil\-.

  Функция заполняет поля с указанными значениями, устанавливая их в значения
по умолчанию.

 ~Содержание~@Contents@     Скрипт ~configData.lua~@LFc_configData@

@LFc_config_register
$ Функция \37context.config.\-#register#: LF context
  Функция осуществляет регистрацию конфигурации в ~реестре конфигураций~@LFc_usecfg_register@.
    \37local isOk = context.config.register(regdata)\-

  Параметры:
    \37regdata\- (table) — ¦~информация о конфигурации~@LFc_config_regdata@.

  Результат:
    \37isOk\-  (bool) — ¦результат регистрации, значения:
      \37true\-   — ¦при успешной регистрации конфигурации.
      \37false\-  — ¦при регистрации конфигурации с параметрами
уже зарегистрированной конфигурации.

  Для каждой регистрируемой конфигурации создаётся таблица с информацией
об этой конфигурации. Она сохраняется в реестре конфигурации по полю, заданному
в \37regdata.key\-. Эта информация используется для загрузки конфигурации.
Конфигурация загружается только при первом обращении к ней.

 ~Содержание~@Contents@     Скрипт ~configData.lua~@LFc_configData@

@LFc_config_unregister
$ Функция \37context.config.\-#unregister#: LF context
  Функция осуществляет снятие с регистрации конфигурации из #реестра конфигураций#.
    \37local isOk = context.config.unregister(regdata)\-

  Параметры:
    \37regdata\- (table) — ¦~информация о конфигурации~@LFc_config_regdata@.

  Результат:
    \37isOk\-  (bool) — ¦результат регистрации, значения:
      \37true\-   — ¦при успешном снятии с регистрации конфигурации.
      \37false\-  — ¦при отмене регистрации конфигурации
с отсутствующими или несовпадающими данными регистрации.

 ~Содержание~@Contents@     Скрипт ~configData.lua~@LFc_configData@

@LFc_config_regdata
$ #Информация о конфигурации#: LF context
  Информация о конфигурации необходима как для ~загрузки~@LFc_config_load@,
так и для ~регистрации~@LFc_config_register@ этой конфигурации.
Эта информация хранится в следующих полях таблицы:
    \37key\-   (string) — ¦имя конфигурации в реестре конфигураций
(для регистрации или при отсутствии имени файла).
    \37path\-  (string) — ¦базовая папка файла конфигурации
(по умолчанию "context").
    \37name\-  (string) — ¦основное имя файла конфигурации
(по умолчанию совпадает с именем конфигурации).
    \37inherit\- (bool) — признак использования ~механизма наследования~@LFc_inherit@.
    \37mode\-   (table) — параметры ~слияния таблиц~@LFc_config_merge@ конфигураций
(по умолчанию используется { basis = "base", merge = "update" }).

 ~Содержание~@Contents@     Скрипт ~configData.lua~@LFc_configData@

@LFc_manageData
$ Скрипт #manageData.lua#: LF context
  Скрипт предназначен для визуального управления конфигурациями.
Он содержит следующие функции, доступные через \37context.manage\-:
    \37showFileList\- — ¦окно со списком открытых файлов.

 ~Содержание~@Contents@     ~Файлы пакета~@LFc_files@
