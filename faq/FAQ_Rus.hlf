.Language=Russian,Russian (Русский)
.PluginContents=LuaFAR FAQ
.Options TabSize=4
.Options CtrlColorChar=\
.Options CtrlStartPosChar=¦

@Contents
$ #LuaFAR FAQ#
  Список тем и вопросов по Lua и LuaFAR:

  ~Скрипты и библиотеки~@FAQ_pathes@
    ~Где размещать общие скрипты и библиотеки?~@FAQ_pathes_lf@
        ~Пример задания переменных окружения~@FAQ_pathes_exmp@
    ~Где размещать скрипты для LuaFAR для Редактора?~@FAQ_pathes_lf4e@

  ~Использование в FAR~@FAQ_using@
    ~Макросы неправильно работают при запуске из скриптов.~@FAQ_using_macros@

  ~Работа со строками~@FAQ_string@
    ~Строки не соединяются, получается только первая строка.~@FAQ_string_concat@

  ~Работа с таблицами~@FAQ_table@
    ~Как проверить: пустая таблица или нет?~@FAQ_table_empty@
    ~Зачем необходимо использовать __index?~@FAQ_table__index@

@Help
 ~LuaFAR FAQ~@Contents@

@FAQ_pathes
$ #Скрипты и библиотеки#: Общие замечания: FAQ
  Использование общих скриптов и библиотек для скриптов Lua,
а также скриптов и плагинов LuaFAR, связано с особенностями их работы.

    ~Где размещать скрипты и библиотеки для LuaFAR?~@FAQ_pathes_lf@
    ~Где размещать скрипты для LuaFAR для Редактора?~@FAQ_pathes_lf4e@

 ~Содержание~@Contents@

@FAQ_pathes_lf
$ #Где размещать общие скрипты и библиотеки?#: FAQ
  Для использования скриптов и библиотек рекомендуется выполнить следующее:

  * ¦Создать папку, где будут находиться основные библиотеки:
    lua5.1.dll, lua51.dll, luafar.dll, luafarw.dll и т.д.
    Добавить путь к этой папке в переменную окружения PATH.
    #PATH#\37 = <Текущий_PATH>;<Путь_к_папке>\-
  * ¦Создать папку, где будут находиться скрипты Lua.
    Прописать эту папку в переменную окружения LUA_PATH:
    #LUA_PATH#\37 = ?.lua;<Путь_к_папке>\?.lua\-
  * ¦Создать папку, где будут находиться библиотеки для Lua.
    Прописать эту папку в переменную окружения LUA_CPATH:
    #LUA_CPATH#\37 = ?.dll;<Путь_к_папке>\?.dll\-
  * ¦Создать папку, где будут находиться скрипты и библиотеки,
    общие для всех скриптов и плагинов, использующих LuaFAR.
    Прописать эту папку в переменную окружения LUAFAR_PATH:
    #LUAFAR_PATH#\37 = <Путь_к_папке>\?.lua\-

    ~Пример задания переменных окружения~@FAQ_pathes_exmp@

 ~Содержание~@Contents@     ~Скрипты и библиотеки~@FAQ_pathes@

@FAQ_pathes_exmp
$ #Пример задания переменных окружения.#: FAQ
  #PATH#   \37 = <Текущий_PATH>;D:\Lib\-
  #LUA_DIR#\37 = D:\Lib\Lua\-

  #LUA_PATH# \37 = ?.lua;%LUA_DIR%\?.lua\-
  #LUA_CPATH#\37 = ?.dll;%LUA_DIR%\Lib\?.dll;%LUA_DIR%\Lib\l?.dll\-

  #LUAFAR_DIR#  \37 = %LUA_DIR%\LuaFAR\-
  #LUAFAR_PATH# \37 = %LUAFAR_DIR%\?.lua;%LUA_PATH%\-

    \1FСтруктура каталогов\-

  D:\Lib     — Папка общих библиотек:
               lua5.1.dll, lua51.dll, luafar.dll, luafarw.dll.
  D:\Lib\Lua — Папка скриптов Lua.
  D:\Lib\Lua\Lib    — Папка библиотек для Lua.
  D:\Lib\Lua\LuaFAR — Папка скриптов Lua для LuaFAR‑плагинов.
  D:\Lib\Lua\LuaFAR\context — Папка скриптов пакета LuaFAR context.

  См. файл \37lf_pathes.reg\- в папке \37context\\faq\-.

 ~Содержание~@Contents@     ~Скрипты и библиотеки~@FAQ_pathes@

@FAQ_pathes_lf4e
$ #Где размещать скрипты для LuaFAR для Редактора?#: FAQ
  Для скриптов в плагине LuaFAR для Редактора используется папка
                \37<Папка_плагина>\scripts\- .
 Создайте в ней свою отдельную папку, где и размещайте свои скрипты.
    \1FПример\-:
  \37<Папка_плагина>\scripts\fl_scripts
  <Папка_плагина>\scripts\Rh_Scripts\-

  Для их подключения в скриптах используйте пути относительно папки scripts:
    \1FПример\-:
  \37local Menu = require 'fl_scripts.utils.treemenu'
  local Menu = require 'Rh_Scripts.RMenu.RectMenu'\-

  Подробности см. в руководстве LuaFAR для Редактора (LuaFAR for Editor).

 ~Содержание~@Contents@     ~Скрипты и библиотеки~@FAQ_pathes@

@FAQ_using
$ #Использование в FAR#: Общие замечания: FAQ
  FAR API позволяет реализовать многое, но не всё. Кроме того,
следует учитывать некоторые особенности использования API‑функций.
См. подробности в документации FAR Manager, LuaFAR и используемых плагинов.

 ~Содержание~@Contents@

@FAQ_string
$ #Работа со строками#: Общие замечания: FAQ
  Lua написан на Ansi C и поэтому использует строки, оканчивающиеся нулём.
Однако в самом Lua используются строки произвольного размера и содержания.
Поэтому они могут содержать '\\000' прямо внутри строки как обычный символ.

    ~Строки не соединяются, получается только первая строка~@FAQ_string_concat@

 ~Содержание~@Contents@

@FAQ_string_concat
$ #Строки не соединяются, получается только первая строка.#: FAQ

  Скрипт использует библиотеку, которая работает только со строками,
оканчивающиеся нулём. Вероятно, первая строка содержит в конце '\\000'.
Фактически строки соединены, но в библиотеке идёт работа с частью
всей строки — только до первого символа '\\000'.
    \1FПример\-:
  \37local s1 = 'abc\\000'
  local s2 = 'def'
  --> s1..s2 = 'abc\\000def'
  far.Message(s1..s2) --> 'abc'\-

 ~Содержание~@Contents@     ~Работа со строками~@FAQ_string@

@FAQ_table
$ #Работа с таблицами#: Общие замечания: FAQ
  Таблица является типом данных, соединяющим в себе возможности
записи (структуры) с полями (обычно именованными, но не обязательно)
и массива с натуральными индексами.
  Переменные‑таблицы фактически содержат ссылки на таблицы.
При присваивании копируются не сами таблицы, а ссылки на эти таблицы.

    ~Как проверить: пустая таблица или нет?~@FAQ_table_empty@
    ~Зачем необходимо использовать __index?~@FAQ_table__index@

@FAQ_table_empty
$ #Как проверить: пустая таблица или нет?#: FAQ
  Проверка таблицы \37t\- на "пустоту" с помощью сравнения
    \37t == {}\-
 не работает, так как здесь сравниваются две различные таблицы: \37t\- и \37{}\-.
  Если таблица представляет собой массив, можно проверить её длину:
    \37##t == 0\-
  Если таблица представляет собой запись, можно проверить наличие поля:
    \37next(t, nil) == nil\-
  Однако эти способы могут работать неверно, если используются метатаблицы.

 ~Содержание~@Contents@     ~Работа с таблицами~@FAQ_table@

@FAQ_table__index
$ #Зачем необходимо использовать __index?#: FAQ
  1. Чтобы задать значения по умолчанию в отдельной таблице:
    \37local Default = { x = 10, y = 10 }
    local Result = { z = 25 }
    setmetatable(Result, { __index = Default })
    -- ... --
    local x = Result.x --> 10\-
  2. Чтобы сохранить значения по умолчанию в исходной таблице:
    \37Result.x = 20 --> Default.x = 10
    --> Result = { x = 20, z = 25 }\-
  Фактически, это способ "наследования" таблиц.

  Замечания:
  1. ¦При использовании функций next(), pairs() и ipairs()
     для таблицы поля исходной таблицы "скрыты" от доступа.
  2. ¦[Shmuel] Для экономии памяти вместо
    \37local Result = setmetatable({}, { __index = Default })\-
     можно использовать следующую конструкцию
    \37local Result = { __index = Default }
    setmetatable(Result, Result)\-
     Здесь создаётся и используется только одна таблица вместо двух.
     Небольшой недостаток — наличие поля __index в самой таблице Result.

 ~Содержание~@Contents@     ~Работа с таблицами~@FAQ_table@
